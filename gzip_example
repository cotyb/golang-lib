package gzip_example

import (
	"bytes"
	"compress/gzip"
	"reflect"
	"unsafe"
)

func GzipEncode(input []byte) ([]byte, error) {
	var buf bytes.Buffer
	w := gzip.NewWriter(&buf)
	_, err := w.Write(input)
	if err != nil {
		return []byte{}, err
	}
	err = w.Close()
	if err != nil {
		return []byte{}, err
	}
	return buf.Bytes(), nil
}

func GzipDecode(input []byte) ([]byte, error) {
	if len(input) <= 0 {
		return []byte{}, nil
	}
	r, err := gzip.NewReader(bytes.NewReader(input))
	if err != nil {
		return []byte{}, err
	}
	err = r.Close()
	if err != nil {
		return []byte{}, err
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(r)
	return buf.Bytes(), err
}

func UnsafeBytes(s string) []byte {
	return *(*[]byte)(unsafe.Pointer(&reflect.SliceHeader{
		Len:  len(s),
		Cap:  len(s),
		Data: (*(*reflect.StringHeader)(unsafe.Pointer(&s))).Data,
	}))
}
